이 과정은 C언어로 간단한 웹서버를 구현하는 것으로 목적으로 한다.

아주 간단히...

$ cd
$ mkdir mksvr
$ cd mysvr

## 일단 요청 받아서 응답 받으면 종료하는 웹서버
$ vi simple-http-server.c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <ifaddrs.h>
#include <netdb.h>
#include <netinet/in.h>

int main(int argc, char *args[]) {

	int sock;
	int client;
	struct sockaddr_in addr;
	struct sockaddr_in client_addr;
	socklen_t addr_len = sizeof(addr);
	int bind_port = 8080;
	int on = 1;
	char buffer[1024] = {0,};
	size_t read_len;
	const char * response_packet = "HTTP/1.1 200 OK\r\nContent-Length: 5\r\nContent-Type: text/plain\r\n\r\nHello";

	sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (sock < 0) {
		perror("socket() error");
		return 1;
	}
	
	if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void*)&on, sizeof(on)) != 0) {
		perror("setsockopt() error");
		return 1;
	}

	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = htonl(INADDR_ANY);
	addr.sin_port = htons(bind_port);
	if (bind(sock, (struct sockaddr*)&addr, addr_len) != 0) {
		perror("bind() error");
		return 1;
	}

	if (listen(sock, 5) != 0) {
		perror("listen() error");
		return 1;
	}

	printf("listening... %d\n", bind_port);
	client = accept(sock, (struct sockaddr*)&client_addr, &addr_len);
	if (client < 0) {
		perror("accept() error");
		return 1;
	}

	read_len = recv(client, buffer, sizeof(buffer), 0);
	if (read_len > 0) {
		printf("RECV: %s", buffer);
	}

	send(client, response_packet, strlen(response_packet), 0);

	close(client);
	close(sock);
	
    return 0;
}
## 헤더 분석
$ vi http-parser.h
#ifndef __HTTP_PARSER_H__
#define __HTTP_PARSER_H__

typedef struct _http_request_line_t {
	char method[100];
	char uri[4096];
	char protocol[512];
} http_request_line_t;

typedef struct _http_header_field_t {
	char name[100];
	char value[512];
	struct _http_header_field_t * next;
} http_header_field_t;

typedef struct _http_header_fields_t {
	http_header_field_t * first;
} http_header_fields_t;

extern const char * parseHttpRequestLine(const char * header, http_request_line_t * line);
extern void parseHttpHeader(const char * header, http_header_fields_t * fields);
extern char * getHeaderField(http_header_fields_t * fields, const char * name);
extern void releaseHeaderFields(http_header_fields_t * fields);

#endif

## 헤더 분석
$ vi http-parser.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "http-parser.h"

typedef void (*name_value_handler)(const char * name, const char * value, void * userData);
static const char * s_parse_http_request_line(const char * header, http_request_line_t * line);
static int s_parse_header_fields(const char * str, name_value_handler handler, void * userData);
static void s_make_name_value_list(const char * name, const char * value, void * userData);
static char * s_get_header_field(http_header_fields_t * fields, const char * name);
static void s_remove_header_fields(http_header_fields_t * fields);

const char * parseHttpRequestLine(const char * header, http_request_line_t * line) {
	return s_parse_http_request_line(header, line);
}
void parseHttpHeader(const char * header, http_header_fields_t * fields) {
	s_parse_header_fields(header, s_make_name_value_list, fields);
}
char * getHeaderField(http_header_fields_t * fields, const char * name) {
	return s_get_header_field(fields, name);
}
void releaseHeaderFields(http_header_fields_t * fields) {
	s_remove_header_fields(fields);
}

static void s_append_header_field(http_header_fields_t * fields, const char * name, const char * value) {
	http_header_field_t * new_node = NULL;
	http_header_field_t * last = fields->first;
	while (last && last->next) {
		last = last->next;
	}

	new_node = calloc(sizeof(http_header_field_t), 1);
	snprintf(new_node->name, sizeof(new_node->name), "%s", name);
	snprintf(new_node->value, sizeof(new_node->value), "%s", value);
	
	if (last == NULL) {
		fields->first = new_node;
	} else {
		last->next = new_node;
	}
}

static char * s_get_header_field(http_header_fields_t * fields, const char * name) {
	http_header_field_t * header = fields->first;
	while (header) {
		if (!strcasecmp(header->name, name)) {
			return header->value;
		}
		header = header->next;
	}
	return NULL;
}

static void s_remove_header_fields(http_header_fields_t * fields) {
	http_header_field_t * header = fields->first;
	while (header) {
		http_header_field_t * node = header;
		header = header->next;
		free(node);
	}
}

static char * s_first_not_space(char * str) {
	while (*str) {
		if (!isspace(*str)) {
			return str;
		}
		str++;
	}
	return NULL;
}

static char * s_find(char * str, char m) {
	while (*str) {
		if (*str == m) {
			return str;
		}
		str++;
	}
	return NULL;
}

static char * s_rtrim(char * str, size_t size) {
	size_t i = size - 1;
	for (; i >= 0; i--) {
		if (!isspace(str[i])) {
			break;
		}
		str[i] = '\0';
	}
	return str;
}

static const char * s_parse_http_request_line(const char * header, http_request_line_t * line) {
	char line_buffer[sizeof(http_request_line_t)] = {0,};
	char * lp = line_buffer;
	char * ps = NULL;
	char * pe = NULL;
	while (*header && lp < line_buffer + sizeof(line_buffer) - 1) {
		if (*header == '\r') {
			break;
		}
		*lp++ = *header++;
	}

	ps = line_buffer;
	pe = s_find(line_buffer, ' ');
	if (!pe) {
		return;
	}
	memcpy(line->method, ps, pe - ps);
	ps = s_first_not_space(pe);
	if (!ps) {
		return NULL;
	}
	pe = s_find(ps, ' ');
	if (!pe) {
		return NULL;
	}
	memcpy(line->uri, ps, pe - ps);
	ps = s_first_not_space(pe);
	if (ps) {
		snprintf(line->protocol, sizeof(line->protocol), "%s", ps);
	}
	return (header + 2);
}

static int s_parse_header_field(char * line, char * nameBuf, size_t nameLen, char * valueBuf, size_t valueLen) {
	char * ns = NULL;
	char * ne = NULL;

	ns = s_first_not_space(line);
	if (!ns) {
		return -1;
	}
	ne = s_find(ns, ':');
	if (!ne) {
		return -1;
	}
	*ne = '\0';
	
	snprintf(nameBuf, nameLen, "%s", s_rtrim(ns, ne - ns));
	snprintf(valueBuf, valueLen, "%s", s_first_not_space(ne + 1));

	return 0;
}

static const char *  s_read_header_line(const char * str, char * buf, size_t size) {
	const char * e = s_find((char*)str, '\r');
	if (!e) {
		snprintf(buf, size, "%s", str);
		return NULL;
	} else {
		size_t len = e - str;
		snprintf(buf, (len + 1 > size ? size : len + 1), "%s", str);
		return e + 2;
	}
}

static int s_parse_header_fields(const char * str, name_value_handler handler, void * userData) {
	char line[1024] = {0,};
	const char * lp = str;
	while ((lp = s_read_header_line(lp, line, sizeof(line)))) {
		char name[100] = {0,};
		char value[128] = {0,};
		s_parse_header_field(line, name, sizeof(name), value, sizeof(value));
		if (handler) {
			handler(name, value, userData);
		}
	}
	return 0;
}

static void s_print_name_value(const char * name, const char * value, void * userData) {
	printf("NAME: \"%s\" / VALUE: \"%s\"\n", name, value);
}

static void s_make_name_value_list(const char * name, const char * value, void * userData) {
	http_header_fields_t * fields = (http_header_fields_t*)userData;
	s_append_header_field(fields, name, value);
}

## HTTP 서버 소스
$ vi single-thread-http-server.c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <ifaddrs.h>
#include <netdb.h>
#include <netinet/in.h>
#include "http-parser.h"

static void s_handle_client(int client_sock, struct sockaddr_in * client_addr, socklen_t client_addr_len);

int main(int argc, char *args[]) {

	int sock;
	int client;
	struct sockaddr_in addr;
	struct sockaddr_in client_addr;
	socklen_t addr_len = sizeof(addr);
	int bind_port = 8080;
	int on = 1;

	sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (sock < 0) {
		perror("socket() error");
		return 1;
	}
	
	if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void*)&on, sizeof(on)) != 0) {
		perror("setsockopt() error");
		return 1;
	}

	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = htonl(INADDR_ANY);
	addr.sin_port = htons(bind_port);
	if (bind(sock, (struct sockaddr*)&addr, addr_len) != 0) {
		perror("bind() error");
		return 1;
	}

	if (listen(sock, 5) != 0) {
		perror("listen() error");
		return 1;
	}

	printf("listening... %d\n", bind_port);
	while (1) {
		client = accept(sock, (struct sockaddr*)&client_addr, &addr_len);
		if (client < 0) {
			perror("accept() error");
			return 1;
		}

		s_handle_client(client, &client_addr, addr_len);
	}
	
	close(sock);
	
    return 0;
}

static void s_handle_client(int client_sock, struct sockaddr_in * client_addr, socklen_t client_addr_len) {
	int read_len = -1;
	char header_buffer[2048] = {0,};
	size_t p = 0;
	http_request_line_t request = {0,};
	http_header_fields_t fields = {0,};
	char response_header[4096] = {0,};
	char response_content[4096] = {0,};
	char client_ip_address[128] = {0,};

	while (p < sizeof(header_buffer) && (read_len = recv(client_sock, header_buffer + p, 1, 0)) > 0) {
		if (p > 4 &&
			header_buffer[p - 3] == '\r' && header_buffer[p - 2] == '\n' &&
			header_buffer[p - 1] == '\r' && header_buffer[p] == '\n') {
			break;
		}
		p++;
		read_len = -1;
	}

	if (read_len < 0) {
		printf("socket closed\n");
		return;
	}

	inet_ntop(client_addr->sin_family, &client_addr->sin_addr, client_ip_address, sizeof(client_ip_address));
	
	parseHttpHeader(parseHttpRequestLine(header_buffer, &request), &fields);

	snprintf(response_content, sizeof(response_content), "<h1>Your Request Information</h1>"
			 "<p>You IP Address: %s:%d</p>"
			 "<ul>"
			 "<li>Method: %s</li>"
			 "<li>Path: %s</li>"
			 "<li>Protocol: %s</li>"
			 "</ul>", client_ip_address, ntohs(client_addr->sin_port), request.method, request.uri, request.protocol);

	snprintf(response_header, sizeof(response_header), "HTTP/1.1 200 OK\r\n"
			 "Content-Type: text/html\r\n"
			 "Content-Length: %ld\r\n"
			 "\r\n", strlen(response_content));

	send(client_sock, response_header, strlen(response_header), 0);
	send(client_sock, response_content, strlen(response_content), 0);

	releaseHeaderFields(&fields);

	close(client_sock);
}

## Makefile
$ vi Makefile
.PHONY: http-parser-test simple-http-server single-thread-http-server

all: simple-http-server

http-parser-test:
	gcc -o $@ $@.c http-parser.c

simple-http-server:
	gcc -o $@ $@.c

single-thread-http-server:
	gcc -o $@ $@.c http-parser.c

clean:
	rm -rf http-parser-test simple-http-server single-thread-http-server
  
## Make 실행
$ make
$ make single-thread-http-server

## Make 결과
$ ls -la -IMake* -I*.c -I*.h
simple-http-server
single-thread-http-server


## simple 서버 기동 및 테스트
$ ./simple-http-server
listening... 8080

## 접속 시 출력하고 close
RECV: GET / HTTP/1.1
User-Agent: curl/7.29.0
Host: localhost:8080
Accept: */*

## 다른 창에서 접속
$ curl http://localhost:8080
Hello

## single-thread-http-server 서버 기동 및 테스트(## Ctrl + C로 종료)
$./single-thread-http-server
listening... 8080

## 다른 창에서 접속
$ curl http://localhost:8080
<h1>Your Request Information</h1><p>You IP Address: 127.0.0.1:36414</p><ul><li>Method: GET</li><li>Path: /</li><li>Protocol: HTTP/1.1</li></ul>

## 우리가 설치하고 테스트를 해볼려고 하는 아파치는 그저 C언어로 만든 웹서버 입니다.
https://github.com/apache/httpd
